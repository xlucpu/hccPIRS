for (i in 1 : (n + 1)){
sub <- as.data.frame(Corr[(i*n - (n - 1)):(i*n),2])
for (j in 2 : n){
sub[1,2] <- 0
sub[j,2] <- sub[j-1,2] + sub[j-1,1]
sub[1,3] <- sub[1,1]
sub[j,3] <- sub[j-1,3] + sub[j,1]
}
Corr[(i*n - (n - 1)):(i*n),4] <- sub[,2]
Corr[(i*n - (n - 1)):(i*n),5] <- sub[,3]
}
Corr <- Corr[order(Corr$Index),]
head(Corr)
Links$start_1 <- Corr$V4[1:(nrow(Corr)/2)]
Links$end_1 <- Corr$V5[1:(nrow(Corr)/2)]
Links$start_2 <- Corr$V4[(nrow(Corr)/2 + 1):nrow(Corr)]
Links$end_2 <- Corr$V5[(nrow(Corr)/2 + 1):nrow(Corr)]
head(Links)
color <- data.frame(colorRampPalette(heatmap.BlWtRd2)(201))
for (i in 1:nrow(Links)){
Links[i,8] <- substring(color[Links[i,3] * 100 + 101, 1], 1, 7)
}
names(Links)[8] <- "color"
head(Links)
par(mar=rep(0,4))
circos.clear()
circos.par(start.degree = 90, #从哪里开始画，沿着逆时针顺序
#gap.degree规定左右间隔，track.margin规定上下间隔
gap.degree = 5, #基因bar之间的间隔大小
track.margin = c(0,0.23), #值越大，基因跟连线的间隔越小
cell.padding = c(0,0,0,0)
)
circos.initialize(factors = GeneID$GeneID,
xlim = cbind(GeneID$Gene_Start, GeneID$Gene_End))
#先画基因
par(mar=rep(0,4))
circos.clear()
circos.par(start.degree = 90, #从哪里开始画，沿着逆时针顺序
#gap.degree规定左右间隔，track.margin规定上下间隔
gap.degree = 5, #基因bar之间的间隔大小
track.margin = c(0,0.23), #值越大，基因跟连线的间隔越小
cell.padding = c(0,0,0,0)
)
circos.initialize(factors = GeneID$GeneID,
xlim = cbind(GeneID$Gene_Start, GeneID$Gene_End))
circos.trackPlotRegion(ylim = c(0, 1), factors = GeneID$GeneID,
track.height = 0.05, #基因线条的胖瘦
#panel.fun for each sector
panel.fun = function(x, y) {
#select details of current sector
name = get.cell.meta.data("sector.index") #基因ID
i = get.cell.meta.data("sector.numeric.index") #基因数量
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
#基因名
circos.text(x = mean(xlim), y = 1,
labels = name,
cex = 1.2, #基因ID文字大小
niceFacing = TRUE, #保持基因名的头朝上
facing = "bending",#基因名沿着圆弧方向，还可以是reverse.clockwise
adj = c(0.5, -2.5), #基因名所在位置，分别控制左右和上下
font = 2  #加粗
)
#plot main sector
circos.rect(xleft = xlim[1],
ybottom = ylim[1],
xright = xlim[2],
ytop = ylim[2],
col = GeneID$Color[i],
border = GeneID$Color[i])
#plot axis
circos.axis(labels.cex = 0.7,
direction = "outside"#,
#默认就很好看，你还可以用下面的参数微调
#主刻度设置
#major.at = seq(from = 0,
#               to = floor(GeneID$Gene_End)[i],
#               by = 400), #根据基因的长短自行调整
#副刻度数量
#minor.ticks = 4,
#labels.niceFacing = TRUE,
#labels.facing = "outside" #或者clockwise
)})
for(i in 1:nrow(Links)){
circos.link(sector.index1 = Links$Gene_1[i],
point1 = c(Links[i, 4], Links[i, 5]),
sector.index2 = Links$Gene_2[i],
point2 = c(Links[i, 6], Links[i, 7]),
col = paste(Links$color[i], "C9", sep = ""),
border = FALSE,
rou = 0.7   #links起始和终止点的y值（圆半径的百分比）
)}
#画图例
i <- seq(0,0.995,0.005)
rect(-1+i/2, #xleft
-1, #ybottom
-0.9975+i/2, #xright
-0.96, #ytop
col = paste(as.character(color[,1]), "FF", sep = ""),
border = paste(as.character(color[,1]), "FF", sep = ""))
text(-0.97, -1.03, "-1")
text(-0.51, -1.03, "1")
dev.off()
pdf.options(reset = TRUE, onefile = FALSE)
pdf(file.path(fig.path,"correlation.pdf"),width = 6,height = 6)
tmp <- tcgahbvmt.sinfo[names(pps.tcga),c("HBVgp2_pre-S1/S2","HBVgp3_X","HBVgp2_S","HBVgp4_c","HBV.pca")]
tmp$pps <- pps.tcga
tmp$`HBVgp2_pre-S1/S2` <- log2(tmp$`HBVgp2_pre-S1/S2` + 1)
tmp$HBVgp3_X <- log2(tmp$HBVgp3_X + 1)
tmp$HBVgp2_S <- log2(tmp$HBVgp2_S + 1)
tmp$HBVgp4_c <- log2(tmp$HBVgp4_c + 1)
colnames(tmp) <- paste0(c("b","c","e","f","d","a"),colnames(tmp))
library(corrr)
d2 <- correlate(tmp)
Links <- stretch(d2, remove.dups = T) %>% na.omit() %>% as.data.frame()
colnames(Links) <- c("Gene_1","Gene_2","Correlation")
Corr <- data.frame(rbind(cbind(Links[,1], Links[,3]), cbind(Links[,2], Links[,3])))
colnames(Corr) <- c("Gene","Correlation")
head(Corr)
Corr$Index <- seq(1,nrow(Corr),1)
Corr <- Corr[order(Corr[,1]),]
Corr[,2] <- as.numeric(as.character(Corr[,2]))
GeneID <- data.frame(GeneID=unique(Corr[,1]))
n <- length(unique(Corr[,1]))-1
GeneID$Gene_Start <-rep(0,n+1)
for (i in 1:(n+1)){
GeneID$Gene_End[i] <- sum(abs(Corr[,2])[(i*n - (n - 1)):(i*n)])
}
GeneID$Color<-jama[1:(n+1)]
head(GeneID)
#GeneID$GeneID <- factor(GeneID$GeneID, levels = c("pps","HBVgp2_pre-S1/S2","HBVgp4_c","HBV.pca","HBVgp3_X","HBVgp2_S"))
head(GeneID)
Corr[,2] <- abs(Corr[,2])
for (i in 1 : (n + 1)){
sub <- as.data.frame(Corr[(i*n - (n - 1)):(i*n),2])
for (j in 2 : n){
sub[1,2] <- 0
sub[j,2] <- sub[j-1,2] + sub[j-1,1]
sub[1,3] <- sub[1,1]
sub[j,3] <- sub[j-1,3] + sub[j,1]
}
Corr[(i*n - (n - 1)):(i*n),4] <- sub[,2]
Corr[(i*n - (n - 1)):(i*n),5] <- sub[,3]
}
Corr <- Corr[order(Corr$Index),]
head(Corr)
Links$start_1 <- Corr$V4[1:(nrow(Corr)/2)]
Links$end_1 <- Corr$V5[1:(nrow(Corr)/2)]
Links$start_2 <- Corr$V4[(nrow(Corr)/2 + 1):nrow(Corr)]
Links$end_2 <- Corr$V5[(nrow(Corr)/2 + 1):nrow(Corr)]
head(Links)
color <- data.frame(colorRampPalette(heatmap.BlWtRd2)(201))
for (i in 1:nrow(Links)){
Links[i,8] <- substring(color[Links[i,3] * 100 + 101, 1], 1, 7)
}
names(Links)[8] <- "color"
head(Links)
par(mar=rep(0,4))
circos.clear()
circos.par(start.degree = 90, #从哪里开始画，沿着逆时针顺序
#gap.degree规定左右间隔，track.margin规定上下间隔
gap.degree = 5, #基因bar之间的间隔大小
track.margin = c(0,0.23), #值越大，基因跟连线的间隔越小
cell.padding = c(0,0,0,0)
)
circos.initialize(factors = GeneID$GeneID,
xlim = cbind(GeneID$Gene_Start, GeneID$Gene_End))
#先画基因
par(mar=rep(0,4))
circos.clear()
circos.par(start.degree = 90, #从哪里开始画，沿着逆时针顺序
#gap.degree规定左右间隔，track.margin规定上下间隔
gap.degree = 5, #基因bar之间的间隔大小
track.margin = c(0,0.23), #值越大，基因跟连线的间隔越小
cell.padding = c(0,0,0,0)
)
circos.initialize(factors = GeneID$GeneID,
xlim = cbind(GeneID$Gene_Start, GeneID$Gene_End))
circos.trackPlotRegion(ylim = c(0, 1), factors = GeneID$GeneID,
track.height = 0.05, #基因线条的胖瘦
#panel.fun for each sector
panel.fun = function(x, y) {
#select details of current sector
name = get.cell.meta.data("sector.index") #基因ID
i = get.cell.meta.data("sector.numeric.index") #基因数量
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
#基因名
circos.text(x = mean(xlim), y = 1,
labels = name,
cex = 1.2, #基因ID文字大小
niceFacing = TRUE, #保持基因名的头朝上
facing = "bending",#基因名沿着圆弧方向，还可以是reverse.clockwise
adj = c(0.5, -2.5), #基因名所在位置，分别控制左右和上下
font = 2  #加粗
)
#plot main sector
circos.rect(xleft = xlim[1],
ybottom = ylim[1],
xright = xlim[2],
ytop = ylim[2],
col = GeneID$Color[i],
border = GeneID$Color[i])
#plot axis
circos.axis(labels.cex = 0.7,
direction = "outside"#,
#默认就很好看，你还可以用下面的参数微调
#主刻度设置
#major.at = seq(from = 0,
#               to = floor(GeneID$Gene_End)[i],
#               by = 400), #根据基因的长短自行调整
#副刻度数量
#minor.ticks = 4,
#labels.niceFacing = TRUE,
#labels.facing = "outside" #或者clockwise
)})
for(i in 1:nrow(Links)){
circos.link(sector.index1 = Links$Gene_1[i],
point1 = c(Links[i, 4], Links[i, 5]),
sector.index2 = Links$Gene_2[i],
point2 = c(Links[i, 6], Links[i, 7]),
col = paste(Links$color[i], "C9", sep = ""),
border = FALSE,
rou = 0.7   #links起始和终止点的y值（圆半径的百分比）
)}
#画图例
i <- seq(0,0.995,0.005)
rect(-1+i/2, #xleft
-1, #ybottom
-0.9975+i/2, #xright
-0.96, #ytop
col = paste(as.character(color[,1]), "FF", sep = ""),
border = paste(as.character(color[,1]), "FF", sep = ""))
text(-0.97, -1.03, "-1")
text(-0.51, -1.03, "1")
dev.off()
tmp <- tcgahbvmt.sinfo[names(pps.tcga),]
tmp$pps <- pps.tcga; tmp$pps2 <- ifelse(tmp$pps > median(tmp$pps),"High PPS","Low PPS")
quantile3 <- quantileCut(tmp$pps,3)
tmp$pps2 <- ifelse(as.character(quantile3) == levels(quantile3)[3],"High PPS","Low PPS")
pps2.tcga <- tmp$pps2; names(pps2.tcga) <- rownames(tmp)
tmp$CTNNB1 <- as.numeric(mut["CTNNB1",rownames(tmp)])
tmp$TP53 <- as.numeric(mut["TP53",rownames(tmp)])
tmp$ARID1A <- as.numeric(mut["ARID1A",rownames(tmp)])
tmp$CDKN2A <- as.numeric(mut["CDKN2A",rownames(tmp)])
fisher.test(table(tmp$CTNNB1,tmp$pps2))
tmp$OS.time <- tmp$OS.time/30
fitd <- survdiff(Surv(OS.time, OS) ~ pps2, data=tmp, na.action=na.exclude)
tmp1 <- tmp
tmp1$pps2 <- factor(tmp1$pps2,levels = c("Low PPS","High PPS"))
summary(coxph(Surv(OS.time, OS) ~ pps2, data=tmp1))
rmst.tcga <- rmst2(time = tmp$OS.time, status = tmp$OS,arm = ifelse(tmp$pps2 == "High PPS",1,0),tau = NULL)
p1 <- 1-pchisq(fitd$chisq, length(fitd$n)-1)
fit <- survfit(Surv(OS.time, OS)~ pps2, data=tmp, type="kaplan-meier", error="greenwood", conf.type="plain", na.action=na.exclude)
cor.test(tmp$HBV.pca,tmp$pps)
wilcox.test(tmp$HBV.pca~tmp$pps2)
plot(tmp$pps,tmp$HBV.pca)
cor.test(tmp$pps,log2(tmp$`HBVgp2_pre-S1/S2` + 1))
cor.test(tmp$pps,log2(tmp$HBVgp2_S + 1))
cor.test(tmp$pps,log2(tmp$HBVgp3_X + 1))
x <- meta.res[,c("id","randomSummary","randomCi.lb","randomCi.ub","randomP")]
x$padj <- p.adjust(x$randomP, "BH")
upx <- x[which(x$padj < 0.05 & x$randomSummary > log2(1.5)),]
dnx <- x[which(x$padj < 0.05 & x$randomSummary < -(log2(1.5))),]
upx2 <- x[which(x$padj < 0.05 & x$randomSummary > log2(2)),]
dnx2 <- x[which(x$padj < 0.05 & x$randomSummary < -(log2(2))),]
par(bty="o", mgp = c(1.9,.33,0), mar=c(3.1,3.1,2.1,2.1)+.1, las=1, tcl=-.25)
plot(NULL, NULL, ylim = c(0,80), xlim = c(-3,3), # 先绘制一个空的画布，仅有边框和坐标名
xlab = "Summary log2FoldChange", ylab = "-log10(Summary FDR)",col="white",
main = "Meta-analysis (n=606)")
rect(par("usr")[1], # 给画布设置背景色，掩盖边???
par("usr")[3],
par("usr")[2],
par("usr")[4],
col = "white",
border = F)
grid(col = "grey90", lty = 2, lwd = 1.5) # 添加网格
points(x$randomSummary,-log10(x$randomP), col = alpha("grey80",0.6), pch = 19, cex = 0.8)
points(upx$randomSummary,-log10(upx$randomP), col = alpha(jama[2],0.6), pch = 19, cex = 1.2)
points(dnx$randomSummary,-log10(dnx$randomP), col = alpha(jama[5],0.6), pch = 19, cex = 1.2)
points(upx2$randomSummary,-log10(upx2$randomP), col = alpha(jama[4],0.6), pch = 19, cex = 1.5)
points(dnx2$randomSummary,-log10(dnx2$randomP), col = alpha(jama[1],0.6), pch = 19, cex = 1.5)
par(new = T, bty="o")
plot(-1, -1,
col = "white",
xlim = c(-3,3), ylim = c(0,80),
xlab = "", ylab = "",
xaxt = "n", yaxt = "n")
x$randomCi.lb
lines(c(upx$randomCi.lb, upx$randomCi.ub), c(-log10(upx$randomP),-log10(upx$randomP)), col = alpha(jama[2],0.6))
par(bty="o", mgp = c(1.9,.33,0), mar=c(3.1,3.1,2.1,2.1)+.1, las=1, tcl=-.25)
plot(NULL, NULL, ylim = c(0,80), xlim = c(-3,3), # 先绘制一个空的画布，仅有边框和坐标名
xlab = "Summary log2FoldChange", ylab = "-log10(Summary FDR)",col="white",
main = "Meta-analysis (n=606)")
rect(par("usr")[1], # 给画布设置背景色，掩盖边???
par("usr")[3],
par("usr")[2],
par("usr")[4],
col = "white",
border = F)
grid(col = "grey90", lty = 2, lwd = 1.5) # 添加网格
points(x$randomSummary,-log10(x$randomP), col = alpha("grey80",0.6), pch = 19, cex = 0.8)
points(upx$randomSummary,-log10(upx$randomP), col = alpha(jama[2],0.6), pch = 19, cex = 1.2)
lines(c(upx$randomCi.lb, -log10(upx$randomP)), c(upx$randomCi.ub,-log10(upx$randomP)), col = alpha(jama[2],0.6))
head(upx)
par(bty="o", mgp = c(1.9,.33,0), mar=c(3.1,3.1,2.1,2.1)+.1, las=1, tcl=-.25)
plot(NULL, NULL, ylim = c(0,80), xlim = c(-3,3), # 先绘制一个空的画布，仅有边框和坐标名
xlab = "Summary log2FoldChange", ylab = "-log10(Summary FDR)",col="white",
main = "Meta-analysis (n=606)")
rect(par("usr")[1], # 给画布设置背景色，掩盖边???
par("usr")[3],
par("usr")[2],
par("usr")[4],
col = "white",
border = F)
grid(col = "grey90", lty = 2, lwd = 1.5) # 添加网格
points(x$randomSummary,-log10(x$randomP), col = alpha("grey80",0.6), pch = 19, cex = 0.8)
points(upx$randomSummary,-log10(upx$randomP), col = alpha(jama[2],0.6), pch = 19, cex = 1.2)
lines(c(upx$randomCi.lb, upx$randomCi.ub), c(-log10(upx$randomP),-log10(upx$randomP)), col = alpha(jama[2],0.6))
lines(x = c(upx$randomCi.lb, upx$randomCi.ub), y = c(-log10(upx$randomP),-log10(upx$randomP)), col = alpha(jama[2],0.6))
c(upx$randomCi.lb[1], upx$randomCi.ub[1])
c(-log10(upx$randomP)[1],-log10(upx$randomP)[1])
par(bty="o", mgp = c(1.9,.33,0), mar=c(3.1,3.1,2.1,2.1)+.1, las=1, tcl=-.25)
plot(NULL, NULL, ylim = c(0,80), xlim = c(-3,3), # 先绘制一个空的画布，仅有边框和坐标名
xlab = "Summary log2FoldChange", ylab = "-log10(Summary FDR)",col="white",
main = "Meta-analysis (n=606)")
rect(par("usr")[1], # 给画布设置背景色，掩盖边???
par("usr")[3],
par("usr")[2],
par("usr")[4],
col = "white",
border = F)
grid(col = "grey90", lty = 2, lwd = 1.5) # 添加网格
points(x$randomSummary,-log10(x$randomP), col = alpha("grey80",0.6), pch = 19, cex = 0.8)
points(upx$randomSummary,-log10(upx$randomP), col = alpha(jama[2],0.6), pch = 19, cex = 1.2)
lines(x = c(upx$randomCi.lb[1], upx$randomCi.ub)[1], y = c(-log10(upx$randomP)[1],-log10(upx$randomP)[1]), col = alpha(jama[2],0.6))
lines(x = c(upx$randomCi.lb[1], upx$randomCi.ub[1]), y = c(-log10(upx$randomP)[1],-log10(upx$randomP)[1]), col = alpha(jama[2],0.6))
for (i in 1:nrow(upx)) {
lines(x = c(upx$randomCi.lb[i], upx$randomCi.ub[i]), y = c(-log10(upx$randomP)[i],-log10(upx$randomP)[i]), col = alpha(jama[2],0.6))
}
points(dnx$randomSummary,-log10(dnx$randomP), col = alpha(jama[5],0.6), pch = 19, cex = 1.2)
for (i in 1:nrow(dnx)) {
lines(x = c(dnx$randomCi.lb[i], dnx$randomCi.ub[i]), y = c(-log10(dnx$randomP)[i],-log10(dnx$randomP)[i]), col = alpha(jama[5],0.6))
}
par(bty="o", mgp = c(1.9,.33,0), mar=c(3.1,3.1,2.1,2.1)+.1, las=1, tcl=-.25)
plot(NULL, NULL, ylim = c(0,80), xlim = c(-3,3), # 先绘制一个空的画布，仅有边框和坐标名
xlab = "Summary log2FoldChange", ylab = "-log10(Summary FDR)",col="white",
main = "Meta-analysis (n=606)")
rect(par("usr")[1], # 给画布设置背景色，掩盖边???
par("usr")[3],
par("usr")[2],
par("usr")[4],
col = "white",
border = F)
grid(col = "grey90", lty = 2, lwd = 1.5) # 添加网格
points(x$randomSummary,-log10(x$randomP), col = alpha("grey80",0.6), pch = 19, cex = 0.8)
points(upx$randomSummary,-log10(upx$randomP), col = alpha(jama[2],0.6), pch = 19, cex = 1.2)
for (i in 1:nrow(upx)) {
lines(x = c(upx$randomCi.lb[i], upx$randomCi.ub[i]), y = c(-log10(upx$randomP)[i],-log10(upx$randomP)[i]), col = alpha(jama[2],0.6))
}
points(dnx$randomSummary,-log10(dnx$randomP), col = alpha(jama[5],0.6), pch = 19, cex = 1.2)
for (i in 1:nrow(dnx)) {
lines(x = c(dnx$randomCi.lb[i], dnx$randomCi.ub[i]), y = c(-log10(dnx$randomP)[i],-log10(dnx$randomP)[i]), col = alpha(jama[5],0.6))
}
points(upx2$randomSummary,-log10(upx2$randomP), col = alpha(jama[4],0.6), pch = 19, cex = 1.5)
for (i in 1:nrow(upx2)) {
lines(x = c(upx2$randomCi.lb[i], upx2$randomCi.ub[i]), y = c(-log10(upx2$randomP)[i],-log10(upx2$randomP)[i]), col = alpha(jama[4],0.6))
}
points(dnx2$randomSummary,-log10(dnx2$randomP), col = alpha(jama[1],0.6), pch = 19, cex = 1.5)
for (i in 1:nrow(dnx2)) {
lines(x = c(dnx2$randomCi.lb[i], dnx2$randomCi.ub[i]), y = c(-log10(dnx2$randomP)[i],-log10(dnx2$randomP)[i]), col = alpha(jama[1],0.6))
}
par(new = T, bty="o")
plot(-1, -1,
col = "white",
xlim = c(-3,3), ylim = c(0,80),
xlab = "", ylab = "",
xaxt = "n", yaxt = "n")
par(bty="o", mgp = c(1.9,.33,0), mar=c(3.1,3.1,2.1,2.1)+.1, las=1, tcl=-.25)
plot(NULL, NULL, ylim = c(0,80), xlim = c(-3,3), # 先绘制一个空的画布，仅有边框和坐标名
xlab = "Summary log2FoldChange", ylab = "-log10(Summary FDR)",col="white",
main = "Meta-analysis (n=606)")
rect(par("usr")[1], # 给画布设置背景色，掩盖边???
par("usr")[3],
par("usr")[2],
par("usr")[4],
col = "white",
border = F)
grid(col = "grey90", lty = 2, lwd = 1.5) # 添加网格
points(x$randomSummary,-log10(x$randomP), col = alpha("grey80",0.6), pch = 19, cex = 0.8)
points(upx$randomSummary,-log10(upx$randomP), col = alpha(jama[2],0.6), pch = 19, cex = 1.2)
for (i in 1:nrow(upx)) {
lines(x = c(upx$randomCi.lb[i], upx$randomCi.ub[i]), y = c(-log10(upx$randomP)[i],-log10(upx$randomP)[i]), col = alpha(jama[2],0.6), lwd = 1.2)
lines(x = c(upx$randomCi.lb[i], upx$randomCi.lb[i]), y = c(-log10(upx$randomP)[i]-1,-log10(upx$randomP)[i]+1, x1 = ), lwd = 1.2, col = alpha(jama[2],0.6))
}
-log10(upx$randomP)[i]
-log10(upx$randomP)[i]-1
par(bty="o", mgp = c(1.9,.33,0), mar=c(3.1,3.1,2.1,2.1)+.1, las=1, tcl=-.25)
plot(NULL, NULL, ylim = c(0,80), xlim = c(-3,3), # 先绘制一个空的画布，仅有边框和坐标名
xlab = "Summary log2FoldChange", ylab = "-log10(Summary FDR)",col="white",
main = "Meta-analysis (n=606)")
rect(par("usr")[1], # 给画布设置背景色，掩盖边???
par("usr")[3],
par("usr")[2],
par("usr")[4],
col = "white",
border = F)
grid(col = "grey90", lty = 2, lwd = 1.5) # 添加网格
points(x$randomSummary,-log10(x$randomP), col = alpha("grey80",0.6), pch = 19, cex = 0.8)
points(upx$randomSummary,-log10(upx$randomP), col = alpha(jama[2],0.6), pch = 19, cex = 1.2)
for (i in 1:nrow(upx)) {
lines(x = c(upx$randomCi.lb[i], upx$randomCi.ub[i]), y = c(-log10(upx$randomP)[i],-log10(upx$randomP)[i]), col = alpha(jama[2],0.6), lwd = 1.2)
lines(x = c(upx$randomCi.lb[i], upx$randomCi.lb[i]), y = c(-log10(upx$randomP)[i]-1,-log10(upx$randomP)[i]+1), lwd = 1.2, col = alpha(jama[2],0.6))
lines(x = c(upx$randomCi.ub[i], upx$randomCi.ub[i]), y = c(-log10(upx$randomP)[i]-1,-log10(upx$randomP)[i]+1), lwd = 1.2, col = alpha(jama[2],0.6))
}
pdf(file.path(fig.path,"volcano plot for meta differential analysis.pdf"), width = 8, height = 8)
par(bty="o", mgp = c(1.9,.33,0), mar=c(3.1,3.1,2.1,2.1)+.1, las=1, tcl=-.25)
plot(NULL, NULL, ylim = c(0,80), xlim = c(-3,3), # 先绘制一个空的画布，仅有边框和坐标名
xlab = "Summary log2FoldChange", ylab = "-log10(Summary FDR)",col="white",
main = "Meta-analysis (n=606)")
rect(par("usr")[1], # 给画布设置背景色，掩盖边???
par("usr")[3],
par("usr")[2],
par("usr")[4],
col = "white",
border = F)
grid(col = "grey90", lty = 2, lwd = 1.5) # 添加网格
points(x$randomSummary,-log10(x$randomP), col = alpha("grey80",0.6), pch = 19, cex = 0.8)
points(upx$randomSummary,-log10(upx$randomP), col = alpha(jama[2],0.6), pch = 19, cex = 1.2)
for (i in 1:nrow(upx)) {
lines(x = c(upx$randomCi.lb[i], upx$randomCi.ub[i]), y = c(-log10(upx$randomP)[i],-log10(upx$randomP)[i]), col = alpha(jama[2],0.6), lwd = 1.2)
# lines(x = c(upx$randomCi.lb[i], upx$randomCi.lb[i]), y = c(-log10(upx$randomP)[i]-1,-log10(upx$randomP)[i]+1), lwd = 1.2, col = alpha(jama[2],0.6))
# lines(x = c(upx$randomCi.ub[i], upx$randomCi.ub[i]), y = c(-log10(upx$randomP)[i]-1,-log10(upx$randomP)[i]+1), lwd = 1.2, col = alpha(jama[2],0.6))
}
points(dnx$randomSummary,-log10(dnx$randomP), col = alpha(jama[5],0.6), pch = 19, cex = 1.2)
for (i in 1:nrow(dnx)) {
lines(x = c(dnx$randomCi.lb[i], dnx$randomCi.ub[i]), y = c(-log10(dnx$randomP)[i],-log10(dnx$randomP)[i]), col = alpha(jama[5],0.6), lwd = 1.2)
}
points(upx2$randomSummary,-log10(upx2$randomP), col = alpha(jama[4],0.6), pch = 19, cex = 1.5)
for (i in 1:nrow(upx2)) {
lines(x = c(upx2$randomCi.lb[i], upx2$randomCi.ub[i]), y = c(-log10(upx2$randomP)[i],-log10(upx2$randomP)[i]), col = alpha(jama[4],0.6), lwd = 1.2)
}
points(dnx2$randomSummary,-log10(dnx2$randomP), col = alpha(jama[1],0.6), pch = 19, cex = 1.5)
for (i in 1:nrow(dnx2)) {
lines(x = c(dnx2$randomCi.lb[i], dnx2$randomCi.ub[i]), y = c(-log10(dnx2$randomP)[i],-log10(dnx2$randomP)[i]), col = alpha(jama[1],0.6), lwd = 1.2)
}
par(new = T, bty="o")
plot(-1, -1,
col = "white",
xlim = c(-3,3), ylim = c(0,80),
xlab = "", ylab = "",
xaxt = "n", yaxt = "n")
invisible(dev.off())
jama
chr.tfs
is.element("CDK",chr.tfs)
cmap.drug
load("G:/ExternalProject/YKF/2/annotation.Rdata")
View(alldata1)
View(tmp3)
View(tmp4)
View(tmp3)
View(tmp4)
View(alldata1)
View(tmp4)
View(tmp3)
intersect(rownames(tmp3),rownames(tmp4))
devtools::install_github("xlucpu/hccPIRS")
# example
library(hccPIRS)
load(system.file("extdata", "tpm.demo.RData", package = "hccPIRS", mustWork = TRUE)) # load example data
res <- hccPIRS(expr = tpm.demo,
scaleFlag  = FALSE,
centerFlag = FALSE,
doplot = TRUE,
fig.path = getwd(),
fig.name   = "heatmap of replication stress",
enrich = "gsva",
width = 6,
height = 4)
pirs <- res$pirs # extract normalized PIRS score for each sample
head(pirs)
rsMat <- res$RS.sscore # extract enrichment score for replication stress signatures
head(rsMat)
rsMat <- res$RS.score # extract enrichment score for replication stress signatures
head(rsMat)
print(pirs)
rsMat[1:3,1:3]
rsMat[1:21,1:3]
res$hm # show the heatmap
# example
library(ComplexHeatmap)
draw(res$hm,heatmap_legend_side = "left") # show the heatmap
getwd()
workdir <- "G:/LIHC_MOVICS/Rpackage"; setwd(workdir)
devtools::document(pkg="G:/LIHC_MOVICS/Rpackage/hccPIRS")
workdir <- "G:/LIHC_MOVICS/Rpackage/hccPIRS"; setwd(workdir)
usethis::use_testthat()
devtools::test()
usethis::use_vignette("hccPIRS-vignette")
usethis::use_readme_md()
usethis::use_package("GSVA",min_version = NULL)
usethis::use_package("ComplexHeatmap",min_version = NULL)
usethis::use_package("circlize",min_version = NULL)
usethis::use_package("gplots",min_version = NULL)
usethis::use_package("grid",min_version = NULL)
use_gpl3_license(name = "Xiaofan Lu")
library(devtools)
library(roxygen2)
library(usethis)
use_gpl3_license(name = "Xiaofan Lu")
system('R CMD Rd2pdf G:/LIHC_MOVICS/Rpackage/hccPIRS')
