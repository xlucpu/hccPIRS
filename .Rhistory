gset <- expr
}
if(max(expr) >= 25 & min(expr) >= 0){
message("--log2 transformation done for expression data.")
gset <- log2(expr + 1)
}
if(!all(is.element(rownames(pirs.coeff),rownames(gset)))) {
stop("--not all features matched in your expression profile, please check for the following missing:")
print(setdiff(rownames(pirs.coeff), intersect(rownames(pirs.coeff),rownames(gset))))
}
# scale data
emat <- t(scale(t(gset), scale = scaleFlag, center = centerFlag))
# call PIRS
pirs.raw <- apply(t(emat[rownames(pirs.coeff),]),1,function(x) {x %*% pirs.coeff$coeff})
pirs <- range01(pirs.raw)
# calculate enrichment for 21 replication stress signatures
RS.score <- gsva(as.matrix(emat),
RS.signature,
method = enrich)
# generate heatmap
indata <- standarize.fun(RS.score,
scaleFlag = TRUE,
centerFlag = TRUE,
halfwidth = halfwidth)
samOrder <- sort(pirs)
pheatmap(indata[,names(samOrder)],
cluster_rows = F,
cluster_cols = F,
show_rownames = F)
pirs
load("pirs.coeff.RData")
load("RS.signature.RData")
load("tpm.demo.RData")
expr = tpm.demo
# customized function for min-max normalization
range01 <- function(x){(x-min(x))/(max(x)-min(x)) * 10}
# customized function for creating heatmap
standarize.fun <- function(indata=NULL, halfwidth=NULL, centerFlag=T, scaleFlag=T) {
outdata=t(scale(t(indata), center=centerFlag, scale=scaleFlag))
if (!is.null(halfwidth)) {
outdata[outdata>halfwidth]=halfwidth
outdata[outdata<(-halfwidth)]= -halfwidth
}
return(outdata)
}
# initial checking
if(max(expr) < 25 | (max(expr) >= 25 & min(expr) < 0)) {
message("--expression profile seems to have veen standardised (z-score or log transformation), no more action will be performed.")
gset <- expr
}
if(max(expr) >= 25 & min(expr) >= 0){
message("--log2 transformation done for expression data.")
gset <- log2(expr + 1)
}
if(!all(is.element(rownames(pirs.coeff),rownames(gset)))) {
stop("--not all features matched in your expression profile, please check for the following missing:")
print(setdiff(rownames(pirs.coeff), intersect(rownames(pirs.coeff),rownames(gset))))
}
# scale data
emat <- t(scale(t(gset), scale = scaleFlag, center = centerFlag))
# call PIRS
pirs.raw <- apply(t(emat[rownames(pirs.coeff),]),1,function(x) {x %*% pirs.coeff$coeff})
pirs <- range01(pirs.raw)
# calculate enrichment for 21 replication stress signatures
RS.score <- gsva(as.matrix(emat),
RS.signature,
method = enrich)
# generate heatmap
indata <- standarize.fun(RS.score,
scaleFlag = TRUE,
centerFlag = TRUE,
halfwidth = halfwidth)
samOrder <- sort(pirs)
pheatmap(indata[,names(samOrder)],
cluster_rows = F,
cluster_cols = F,
show_rownames = F)
pirs
load("pirs.coeff.RData")
load("RS.signature.RData")
load("tpm.demo.RData")
expr = tpm.demo
# customized function for min-max normalization
range01 <- function(x){(x-min(x))/(max(x)-min(x)) * 10}
# customized function for creating heatmap
standarize.fun <- function(indata=NULL, halfwidth=NULL, centerFlag=T, scaleFlag=T) {
outdata=t(scale(t(indata), center=centerFlag, scale=scaleFlag))
if (!is.null(halfwidth)) {
outdata[outdata>halfwidth]=halfwidth
outdata[outdata<(-halfwidth)]= -halfwidth
}
return(outdata)
}
# initial checking
if(max(expr) < 25 | (max(expr) >= 25 & min(expr) < 0)) {
message("--expression profile seems to have veen standardised (z-score or log transformation), no more action will be performed.")
gset <- expr
}
if(max(expr) >= 25 & min(expr) >= 0){
message("--log2 transformation done for expression data.")
gset <- log2(expr + 1)
}
if(!all(is.element(rownames(pirs.coeff),rownames(gset)))) {
stop("--not all features matched in your expression profile, please check for the following missing:")
print(setdiff(rownames(pirs.coeff), intersect(rownames(pirs.coeff),rownames(gset))))
}
# scale data
emat <- t(scale(t(gset), scale = scaleFlag, center = centerFlag))
# call PIRS
pirs.raw <- apply(t(emat[rownames(pirs.coeff),]),1,function(x) {x %*% pirs.coeff$coeff})
pirs <- range01(pirs.raw)
# calculate enrichment for 21 replication stress signatures
RS.score <- gsva(as.matrix(emat),
RS.signature,
method = enrich)
# generate heatmap
indata <- standarize.fun(RS.score,
scaleFlag = TRUE,
centerFlag = TRUE,
halfwidth = halfwidth)
samOrder <- sort(pirs)
pheatmap(indata[,names(samOrder)],
cluster_rows = F,
cluster_cols = F,
show_rownames = F)
samOrder
load("pirs.coeff.RData")
load("RS.signature.RData")
load("tpm.demo.RData")
expr = tpm.demo
# customized function for min-max normalization
range01 <- function(x){(x-min(x))/(max(x)-min(x)) * 10}
# customized function for creating heatmap
standarize.fun <- function(indata=NULL, halfwidth=NULL, centerFlag=T, scaleFlag=T) {
outdata=t(scale(t(indata), center=centerFlag, scale=scaleFlag))
if (!is.null(halfwidth)) {
outdata[outdata>halfwidth]=halfwidth
outdata[outdata<(-halfwidth)]= -halfwidth
}
return(outdata)
}
# initial checking
if(max(expr) < 25 | (max(expr) >= 25 & min(expr) < 0)) {
message("--expression profile seems to have veen standardised (z-score or log transformation), no more action will be performed.")
gset <- expr
}
if(max(expr) >= 25 & min(expr) >= 0){
message("--log2 transformation done for expression data.")
gset <- log2(expr + 1)
}
if(!all(is.element(rownames(pirs.coeff),rownames(gset)))) {
stop("--not all features matched in your expression profile, please check for the following missing:")
print(setdiff(rownames(pirs.coeff), intersect(rownames(pirs.coeff),rownames(gset))))
}
# scale data
emat <- t(scale(t(gset), scale = scaleFlag, center = centerFlag))
# call PIRS
pirs.raw <- apply(t(emat[rownames(pirs.coeff),]),1,function(x) {x %*% pirs.coeff$coeff})
pirs <- range01(pirs.raw)
# calculate enrichment for 21 replication stress signatures
RS.score <- gsva(as.matrix(emat),
RS.signature,
method = enrich)
# generate heatmap
indata <- standarize.fun(RS.score,
scaleFlag = TRUE,
centerFlag = TRUE,
halfwidth = halfwidth)
samOrder <- sort(pirs)
pheatmap(indata[,names(samOrder)],
cluster_rows = F,
cluster_cols = F,
show_rownames = F)
samOrder
load("pirs.coeff.RData")
load("RS.signature.RData")
load("tpm.demo.RData")
expr = tpm.demo
# customized function for min-max normalization
range01 <- function(x){(x-min(x))/(max(x)-min(x)) * 10}
# customized function for creating heatmap
standarize.fun <- function(indata=NULL, halfwidth=NULL, centerFlag=T, scaleFlag=T) {
outdata=t(scale(t(indata), center=centerFlag, scale=scaleFlag))
if (!is.null(halfwidth)) {
outdata[outdata>halfwidth]=halfwidth
outdata[outdata<(-halfwidth)]= -halfwidth
}
return(outdata)
}
# initial checking
if(max(expr) < 25 | (max(expr) >= 25 & min(expr) < 0)) {
message("--expression profile seems to have veen standardised (z-score or log transformation), no more action will be performed.")
gset <- expr
}
if(max(expr) >= 25 & min(expr) >= 0){
message("--log2 transformation done for expression data.")
gset <- log2(expr + 1)
}
if(!all(is.element(rownames(pirs.coeff),rownames(gset)))) {
stop("--not all features matched in your expression profile, please check for the following missing:")
print(setdiff(rownames(pirs.coeff), intersect(rownames(pirs.coeff),rownames(gset))))
}
# scale data
emat <- t(scale(t(gset), scale = scaleFlag, center = centerFlag))
# call PIRS
pirs.raw <- apply(t(emat[rownames(pirs.coeff),]),1,function(x) {x %*% pirs.coeff$coeff})
pirs <- range01(pirs.raw)
# calculate enrichment for 21 replication stress signatures
RS.score <- gsva(as.matrix(emat),
RS.signature,
method = enrich)
# generate heatmap
indata <- standarize.fun(RS.score,
scaleFlag = TRUE,
centerFlag = TRUE,
halfwidth = halfwidth)
samOrder <- sort(pirs)
pheatmap(indata[,names(samOrder)],
cluster_rows = F,
cluster_cols = F,
show_rownames = F)
samOrder
col_fun = colorRamp2(c(-1,-0.5, 0, 0.5, 1), colorpanel(5,low="#44A0D5",mid = "white",high="#A94747"))
library(circlize)
col_fun = colorRamp2(c(-1,-0.5, 0, 0.5, 1), colorpanel(5,low="#44A0D5",mid = "white",high="#A94747"))
library(gplots)
col_fun = colorRamp2(c(-1,-0.5, 0, 0.5, 1), colorpanel(5,low="#44A0D5",mid = "white",high="#A94747"))
top_anno <- anno_barplot(as.numeric(samOrder),
border = T,
bar_width = 1,
gp = gpar(fill = colorpanel(length(samOrder),low="#44A0D5",mid = "white",high="#A94747"),border =NA,lty="blank"),
height = unit(2, "cm"))
Heatmap(as.matrix(indata),
border = TRUE,
col = col_fun3,
cluster_columns = FALSE,
cluster_rows = FALSE,
show_row_names = TRUE,
row_names_side = "right",
show_column_names = FALSE,
width = ncol(plotdata)*unit(4, "mm"),
height = nrow(plotdata)*unit(4, "mm"),
row_names_gp = gpar(fontsize = 10, col = "black"),
column_names_gp = gpar(fontsize = 10),
column_names_side = "bottom",
name = "Enrichment",
top_annotation = HeatmapAnnotation(PIRS = top_anno))
Heatmap(as.matrix(indata),
border = TRUE,
col = col_fun,
cluster_columns = FALSE,
cluster_rows = FALSE,
show_row_names = TRUE,
row_names_side = "right",
show_column_names = FALSE,
width = ncol(plotdata)*unit(4, "mm"),
height = nrow(plotdata)*unit(4, "mm"),
row_names_gp = gpar(fontsize = 10, col = "black"),
column_names_gp = gpar(fontsize = 10),
column_names_side = "bottom",
name = "Enrichment",
top_annotation = HeatmapAnnotation(PIRS = top_anno))
Heatmap(as.matrix(indata),
border = TRUE,
col = col_fun,
cluster_columns = FALSE,
cluster_rows = FALSE,
show_row_names = TRUE,
row_names_side = "right",
show_column_names = FALSE,
width = ncol(indata)*unit(4, "mm"),
height = nrow(indata)*unit(4, "mm"),
row_names_gp = gpar(fontsize = 10, col = "black"),
column_names_gp = gpar(fontsize = 10),
column_names_side = "bottom",
name = "Enrichment",
top_annotation = HeatmapAnnotation(PIRS = top_anno))
top_anno <- anno_barplot(as.numeric(samOrder),
border = T,
bar_width = 1,
gp = gpar(fill = colorpanel(length(samOrder),low="#3B4E55",mid = "81AF96",high="#D69044"),border =NA,lty="blank"),
height = unit(2, "cm"))
top_anno <- anno_barplot(as.numeric(samOrder),
border = T,
bar_width = 1,
gp = gpar(fill = colorpanel(length(samOrder),low="#3B4E55",mid = "#81AF96",high="#D69044"),border =NA,lty="blank"),
height = unit(2, "cm"))
Heatmap(as.matrix(indata),
border = TRUE,
col = col_fun,
cluster_columns = FALSE,
cluster_rows = FALSE,
show_row_names = TRUE,
row_names_side = "right",
show_column_names = FALSE,
width = ncol(indata)*unit(4, "mm"),
height = nrow(indata)*unit(4, "mm"),
row_names_gp = gpar(fontsize = 10, col = "black"),
column_names_gp = gpar(fontsize = 10),
column_names_side = "bottom",
name = "Enrichment",
top_annotation = HeatmapAnnotation(PIRS = top_anno))
width = 8
height = 4
hm <- Heatmap(as.matrix(indata),
border = TRUE,
col = col_fun,
cluster_columns = FALSE,
cluster_rows = FALSE,
show_row_names = TRUE,
row_names_side = "right",
show_column_names = FALSE,
width = ncol(indata)*unit(width, "mm"),
height = nrow(indata)*unit(height, "mm"),
row_names_gp = gpar(fontsize = 10, col = "black"),
column_names_gp = gpar(fontsize = 10),
column_names_side = "bottom",
name = "Enrichment",
top_annotation = HeatmapAnnotation(PIRS = top_anno))
hm
draw(hm, heatmap_legend_side = "left")
rownames(RS.score)
# calculate enrichment for 21 replication stress signatures
label <- c("Homologous recombination",
"Activation of ART in response to replication stress",
"E2F inhibition of pre replication complex",
"Cell cycle",
"Mitotic Spindle Checkpoint",
"G2/M DNA damage checkpoint",
"Homologous DNA Pairing/Strand Exchange",
"HDR through Single Strand Annealing SSA",
"Senescence Associated Heterochromatin Foci",
"Cyclin A/B1 associated events during G2/M transition",
"Chk1 Chk2 inactivation of Cyclin B/Cdk1 complex",
"APC Cdc20 to APC Cdh1 conversion: late anaphase",
"MMR",
"G1/S DNA Damage Checkpoints",
"Recognition of DNA damage: PCNA complex",
"M/G1 Transition",
"DNA Replication pre initiation",
"Formation of TC NER Pre Incision Complex",
"DNA Damage Recognition in GG NER",
"Pyrimidine metabolism")
rownames(RS.score) <- label
# generate heatmap
indata <- standarize.fun(RS.score,
scaleFlag = TRUE,
centerFlag = TRUE,
halfwidth = )
rownames(RS.score)
label
# calculate enrichment for 21 replication stress signatures
label <- c("Homologous recombination",
"Activation of ART in response to replication stress",
"E2F inhibition of pre replication complex",
"Cell cycle",
"Mitotic Spindle Checkpoint",
"G2/M DNA damage checkpoint",
"Homologous DNA Pairing/Strand Exchange",
"HDR through Single Strand Annealing SSA",
"Senescence Associated Heterochromatin Foci",
"Cyclin A/B1 associated events during G2/M transition",
"Chk1 Chk2 inactivation of Cyclin B/Cdk1 complex",
"APC Cdc20 to APC Cdh1 conversion: late anaphase",
"MMR",
"G1/S DNA Damage Checkpoints",
"Recognition of DNA damage: PCNA complex",
"M/G1 Transition",
"DNA Replication pre initiation",
"Formation of TC NER Pre Incision Complex",
"DNA Damage Recognition in GG NER",
"Pyrimidine metabolism",
"Fanconi Anemia Pathway")
RS.score <- gsva(as.matrix(emat),
RS.signature,
method = enrich)
rownames(RS.score) <- label
# generate heatmap
indata <- standarize.fun(RS.score,
scaleFlag = TRUE,
centerFlag = TRUE,
halfwidth = )
samOrder <- sort(pirs)
col_fun = colorRamp2(c(-1,-0.5, 0, 0.5, 1), colorpanel(5,low="#44A0D5",mid = "white",high="#A94747"))
top_anno <- anno_barplot(as.numeric(samOrder),
border = T,
bar_width = 1,
gp = gpar(fill = colorpanel(length(samOrder),low="#3B4E55",mid = "#81AF96",high="#D69044"),border =NA,lty="blank"),
height = unit(2, "cm"))
hm <- Heatmap(as.matrix(indata),
border = TRUE,
col = col_fun,
cluster_columns = FALSE,
cluster_rows = FALSE,
show_row_names = TRUE,
row_names_side = "right",
show_column_names = FALSE,
width = ncol(indata)*unit(width, "mm"),
height = nrow(indata)*unit(height, "mm"),
row_names_gp = gpar(fontsize = 10, col = "black"),
column_names_gp = gpar(fontsize = 10),
column_names_side = "bottom",
name = "Enrichment",
top_annotation = HeatmapAnnotation(PIRS = top_anno))
draw(hm, heatmap_legend_side = "left")
# load R package
library(ComplexHeatmap)
library(GSVA)
library(circlize)
library(gplots)
# load internal coefficient and expression demo for calling PIRS
load("pirs.coeff.RData")
load("RS.signature.RData")
load("tpm.demo.RData")
expr = tpm.demo
# customized function for min-max normalization
range01 <- function(x){(x-min(x))/(max(x)-min(x)) * 10}
# customized function for creating heatmap
standarize.fun <- function(indata=NULL, halfwidth=NULL, centerFlag=T, scaleFlag=T) {
outdata=t(scale(t(indata), center=centerFlag, scale=scaleFlag))
if (!is.null(halfwidth)) {
outdata[outdata>halfwidth]=halfwidth
outdata[outdata<(-halfwidth)]= -halfwidth
}
return(outdata)
}
# initial checking
if(max(expr) < 25 | (max(expr) >= 25 & min(expr) < 0)) {
message("--expression profile seems to have veen standardised (z-score or log transformation), no more action will be performed.")
gset <- expr
}
if(max(expr) >= 25 & min(expr) >= 0){
message("--log2 transformation done for expression data.")
gset <- log2(expr + 1)
}
if(!all(is.element(rownames(pirs.coeff),rownames(gset)))) {
stop("--not all features matched in your expression profile, please check for the following missing:")
print(setdiff(rownames(pirs.coeff), intersect(rownames(pirs.coeff),rownames(gset))))
}
# scale data
emat <- t(scale(t(gset), scale = scaleFlag, center = centerFlag))
# call PIRS
pirs.raw <- apply(t(emat[rownames(pirs.coeff),]),1,function(x) {x %*% pirs.coeff$coeff})
pirs <- range01(pirs.raw)
# calculate enrichment for 21 replication stress signatures
label <- c("Homologous recombination",
"Activation of ART in response to replication stress",
"E2F inhibition of pre replication complex",
"Cell cycle",
"Mitotic Spindle Checkpoint",
"G2/M DNA damage checkpoint",
"Homologous DNA Pairing/Strand Exchange",
"HDR through Single Strand Annealing SSA",
"Senescence Associated Heterochromatin Foci",
"Cyclin A/B1 associated events during G2/M transition",
"Chk1 Chk2 inactivation of Cyclin B/Cdk1 complex",
"APC Cdc20 to APC Cdh1 conversion: late anaphase",
"MMR",
"G1/S DNA Damage Checkpoints",
"Recognition of DNA damage: PCNA complex",
"M/G1 Transition",
"DNA Replication pre initiation",
"Formation of TC NER Pre Incision Complex",
"DNA Damage Recognition in GG NER",
"Pyrimidine metabolism",
"Fanconi Anemia Pathway")
RS.score <- gsva(as.matrix(emat),
RS.signature,
method = enrich)
rownames(RS.score) <- label
library(SimDesign)
RS.score <- quite(gsva(as.matrix(emat),
RS.signature,
method = enrich))
RS.score <- quiet(gsva(as.matrix(emat),
RS.signature,
method = enrich))
RS.score <- suppressWarnings(gsva(as.matrix(emat),
RS.signature,
method = enrich))
workdir <- "G:/LIHC_MOVICS/Rpackage/hccPIRS"; setwd(workdir)
usethis::use_testthat()
devtools::test()
usethis::use_vignette("hccPIRS-vignette")
usethis::use_readme_md()
# hccPIRS
usethis::use_news_md()
usethis::use_build_ignore()
usethis::use_mit_license(name = "Xiaofan Lu")
usethis::use_package("GSVA",min_version = NULL)
usethis::use_package("ComplexHeatmap",min_version = NULL)
usethis::use_package("circlize",min_version = NULL)
usethis::use_package("gplots",min_version = NULL)
use_gpl3_license(name = "Xiaofan Lu")
system('R CMD Rd2pdf G:/LIHC_MOVICS/Rpackage/hccPIRS')
devtools::document(pkg="G:/LIHC_MOVICS/Rpackage/hccPIRS")
system('R CMD Rd2pdf G:/LIHC_MOVICS/Rpackage/hccPIRS')
git2r::config(repo="hccPIRS",user.name="xlucpu",user.email="xlu.cpu@foxmail.com",global=TRUE)
devtools::document(pkg="G:/LIHC_MOVICS/Rpackage/hccPIRS")
workdir <- "G:/LIHC_MOVICS/Rpackage"; setwd(workdir)
devtools::document(pkg="G:/LIHC_MOVICS/Rpackage/hccPIRS")
devtools::document(pkg="G:/LIHC_MOVICS/Rpackage/hccPIRS")
workdir <- "G:/LIHC_MOVICS/Rpackage/hccPIRS"; setwd(workdir)
usethis::use_testthat()
devtools::test()
usethis::use_vignette("hccPIRS-vignette")
usethis::use_readme_md()
usethis::use_news_md()
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
system('R CMD Rd2pdf G:/LIHC_MOVICS/Rpackage/hccPIRS')
system('R CMD Rd2pdf G:/LIHC_MOVICS/Rpackage/hccPIRS')
devtools::install_github("xlucpu/hccPIRS")
